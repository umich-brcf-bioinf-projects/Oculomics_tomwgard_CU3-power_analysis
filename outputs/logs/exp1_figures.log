[1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(GGally)

> library(RColorBrewer)

> library(tidyverse)

> ###############################################################################
> ## Load normalized data
> 
> #setwd("/nfs/mm-isilon/bioinfcore/Act ..." ... [TRUNCATED] 
-\|/                                                                                                                                                                                            
> normalized_data_df=raw_df[grepl("*Normalized*", colnames(raw_df))]

> colnames(normalized_data_df)=sapply(strsplit(colnames(normalized_data_df), split = ","), function(x){x[[3]]})

> normalized_data_df <- normalized_data_df %>% rename(
+   `Pool1.1`=" Pool 1",
+   `Pool1.2`=" Pool 2",
+   `Pool1.3`=" Pool 3",
+   `Pool1.4`=" Pool ..." ... [TRUNCATED] 

> normalized_data_df=na.omit(normalized_data_df)

> normalized_samples_df = normalized_data_df[1:5]

> normalized_pools_df = normalized_data_df[6:10]

> ###############################################################################
> ## Pairwise Spearman correlation
> # Considered Pearson and Spearm .... [TRUNCATED] 

> p_ <- GGally::print_if_interactive

> grid.draw.gg <- function(x){
+   print(x)
+ }

> # A custom upper function that simplifies the correlation matrix to suppress
> # the "Corr:" label
> upper_fn <- function(
+   data,
+   mapping,
+  .... [TRUNCATED] 

> # Ensures the scales are consistent across subplots
> lower_fun <- function(data,mapping, min_all, max_all){
+   ggplot(data = data, mapping = mappi .... [TRUNCATED] 

> # Just print the sample names on the diag
> diag_fn <- function (data, mapping) {
+   label <- gsub('`', '', mapping_string(mapping$x))
+   p <- gga .... [TRUNCATED] 

> max_all = max(normalized_samples_df)

> min_all = min(normalized_samples_df)

> p = ggpairs(normalized_samples_df,
+         lower = list(continuous = wrap(lower_fun, min_all=min_all, max_all=max_all)),
+         upper = list(co .... [TRUNCATED] 

> p_(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-pairwise_scatter_samples.pdf'), 
+        plot=p, 
+        width=10, height=10)

> max_all = max(normalized_pools_df)

> min_all = min(normalized_pools_df)

> p = ggpairs(normalized_pools_df,
+         lower = list(continuous = wrap(lower_fun, min_all=min_all, max_all=max_all)),
+         upper = list(cont .... [TRUNCATED] 

> p_(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-pairwise_scatter_pools.pdf'), 
+        plot=p, 
+        width=10, height=10)

> sessionInfo()
R version 4.0.4 (2021-02-15)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Catalina 10.15.7

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] ssize.fdr_1.2      ggrepel_0.8.2      effsize_0.8.1      ComplexUpset_1.0.3 devtools_2.3.2     usethis_2.0.1      RColorBrewer_1.1-2 forcats_0.5.1      stringr_1.4.0     
[10] dplyr_1.0.2        purrr_0.3.4        readr_1.4.0        tidyr_1.1.2        tibble_3.0.6       tidyverse_1.3.0    patchwork_1.0.1    GGally_2.1.0       ggplot2_3.3.2     
[19] cowplot_1.1.0      limma_3.44.3      

loaded via a namespace (and not attached):
 [1] fs_1.5.0            lubridate_1.7.9.2   progress_1.2.2      httr_1.4.2          rprojroot_2.0.2     tools_4.0.4         backports_1.2.1     utf8_1.1.4          R6_2.5.0           
[10] rpart_4.1-15        Hmisc_4.4-2         DBI_1.1.1           colorspace_2.0-0    nnet_7.3-15         withr_2.4.1         gridExtra_2.3       tidyselect_1.1.0    prettyunits_1.1.1  
[19] processx_3.4.5      compiler_4.0.4      cli_2.3.0           rvest_0.3.6         htmlTable_2.1.0     xml2_1.3.2          desc_1.2.0          labeling_0.4.2      checkmate_2.0.0    
[28] scales_1.1.1        callr_3.5.1         digest_0.6.27       foreign_0.8-81      htmltools_0.5.1.1   jpeg_0.1-8.1        base64enc_0.1-3     pkgconfig_2.0.3     sessioninfo_1.1.1  
[37] dbplyr_1.4.4        fastmap_1.1.0       htmlwidgets_1.5.3   rlang_0.4.10        readxl_1.3.1        rstudioapi_0.13     farver_2.0.3        generics_0.1.0      jsonlite_1.7.2     
[46] magrittr_2.0.1      Formula_1.2-4       Matrix_1.3-2        Rcpp_1.0.6          munsell_0.5.0       fansi_0.4.2         lifecycle_1.0.0     stringi_1.5.3       pkgbuild_1.2.0     
[55] plyr_1.8.6          grid_4.0.4          blob_1.2.1          crayon_1.4.1        lattice_0.20-41     haven_2.3.1         splines_4.0.4       hms_1.0.0           knitr_1.31         
[64] ps_1.5.0            pillar_1.4.7        pkgload_1.1.0       reprex_0.3.0        glue_1.4.2          latticeExtra_0.6-29 data.table_1.13.0   remotes_2.2.0       modelr_0.1.8       
[73] png_0.1-7           vctrs_0.3.6         testthat_3.0.2      cellranger_1.1.0    gtable_0.3.0        reshape_0.8.8       assertthat_0.2.1    cachem_1.0.4        xfun_0.21          
[82] broom_0.7.1         survival_3.2-7      pheatmap_1.0.12     memoise_2.0.0       cluster_2.1.0       ellipsis_0.3.1     

> print('Done')
[1] "Done"

> ###############################################################################
> 
> ############################################################### .... [TRUNCATED] 

> # Oculomics analysis, visualizations for proteomics experiment 2
> # jinquma/ cgates 
> # 2/22/2021
> 
> #setwd('/nfs/mm-isilon/bioinfcore/ActivePro .... [TRUNCATED] 

> script_name = "exp1_upset"

> log_start(paste0(output_logs_dir, script_name, ".log")) 
[1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(cowplot)

> library(GGally)

> library(patchwork)

> library(tidyverse)

> library(RColorBrewer)

> if (!require(devtools, quietly=T)) install.packages("devtools")

> if (!require(ComplexUpset, quietly=T)) devtools::install_github("krassowski/complex-upset")

> library(ComplexUpset) #https://krassowski.github.io/complex-upset/articles/Examples_Python.html#11-advanced-usage-examples

> ###############################################################################
> ## Setup data structures
> ####################################### .... [TRUNCATED] 
-/                                                                                                                                                                                            
> normalized_data_df=raw_df[grepl("*Normalized*", colnames(raw_df))]

> colnames(normalized_data_df)=sapply(sapply(strsplit(colnames(normalized_data_df), split = ","), function(x){x[[3]]}), trimws)

> normalized_data_df <- normalized_data_df %>% rename(
+   `Pool1.1`="Pool 1",
+   `Pool1.2`="Pool 2",
+   `Pool1.3`="Pool 3",
+   `Pool1.4`="Pool 4", .... [TRUNCATED] 

> ###############################################################################
> ## Load sample phenotype design
> # Focus to experiment 2 (batch B .... [TRUNCATED] 

> pheno$sample <- recode(pheno$sample, 
+                        `Pool1-1`="Pool1.1",
+                        `Pool1-2`="Pool1.2",
+                  .... [TRUNCATED] 

> #pheno$sample
> 
> batch="A"

> myplex=as.character(pheno$sample[pheno$batch==batch])

> #view(myplex)
> all_abundances = normalized_data_df[names(normalized_data_df) %in% myplex]

> #names(normalized_data_df)
> 
> design=pheno[pheno$sample %in% colnames(all_abundances),]

> design=design[match(colnames(all_abundances), design$sample ),]

> temp_df = all_abundances %>%
+   as_tibble(rownames=NA) %>%
+   mutate_all(negate(is.na))

> # Exclude proteins which were not assigned an abundance in any sample
> temp_df = temp_df[rowSums(temp_df)>0,]

> temp_sample_df = design[,c('sample', 'phenotype', 'plex')]

> temp_sample_df$phenotype_f = factor(temp_sample_df$phenotype,
+                                     levels=c('Pool1', 'Control', 'PDR-L', 'PDR-M', ' .... [TRUNCATED] 

> temp_sample_df$plex_f = factor(temp_sample_df$plex)

> temp_sample_df$sample_f = factor(temp_sample_df$sample,
+                                  levels=temp_sample_df$sample[order(temp_sample_df$phenoty .... [TRUNCATED] 

> temp_sample_df = temp_sample_df[order(temp_sample_df$sample_f),]

> #temp_sample_df
> 
> 
> 
> ###############################################################################
> ## Build plots helper functions
> ##### .... [TRUNCATED] 

> ## Builds the sample annotation strips on side (ala pheatmap)
> make_annotation_strip_fn = function (df, col, fill, fill_palette, legend_name, text_ .... [TRUNCATED] 

> ###############################################################################
> ## Build the plots
> ############################################# .... [TRUNCATED] 

> subpheno_colors = brewer.pal(n = 8, name = 'Paired')[c(1,2,7,8,6)]

> ###############################################################################
> ## Exp2: Make upset plot sorted by phenotype (exp2_upset_by_phenot .... [TRUNCATED] 

> set_size_limits_y = c(980,1000)

> upset_plot = make_upset_plot_fn(temp_df, 
+                                 temp_sample_df$sample_f,
+                                 intersection_ .... [TRUNCATED] 

> #plot(upset_plot$plot)
> 
> pheno_annotation_strip = make_annotation_strip_fn(temp_sample_df, 'sample_f', 'phenotype_f', subpheno_colors, 'sample ty .... [TRUNCATED] 

> ###############################################################################
> ## Assemble plot components
> 
> layout <- '
+ #A##
+ BCDE
+ '

> final_plot = wrap_plots(A = upset_plot$intersection_barplot,
+            B = upset_plot$measured_proteins_barplot,
+            C = upset_plot$inte .... [TRUNCATED] 

> plot(final_plot)

> ggsave(filename=paste0(output_figures_dir,script_name,'-by_pool_vs_sample.pdf'), 
+        plot=final_plot, 
+        width=12, height=10, scale=0.7 .... [TRUNCATED] 

> ###############################################################################
> 
> sessionInfo()
R version 4.0.4 (2021-02-15)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Catalina 10.15.7

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] ssize.fdr_1.2      ggrepel_0.8.2      effsize_0.8.1      ComplexUpset_1.0.3 devtools_2.3.2     usethis_2.0.1      RColorBrewer_1.1-2 forcats_0.5.1      stringr_1.4.0     
[10] dplyr_1.0.2        purrr_0.3.4        readr_1.4.0        tidyr_1.1.2        tibble_3.0.6       tidyverse_1.3.0    patchwork_1.0.1    GGally_2.1.0       ggplot2_3.3.2     
[19] cowplot_1.1.0      limma_3.44.3      

loaded via a namespace (and not attached):
 [1] fs_1.5.0            lubridate_1.7.9.2   progress_1.2.2      httr_1.4.2          rprojroot_2.0.2     tools_4.0.4         backports_1.2.1     utf8_1.1.4          R6_2.5.0           
[10] rpart_4.1-15        Hmisc_4.4-2         DBI_1.1.1           colorspace_2.0-0    nnet_7.3-15         withr_2.4.1         gridExtra_2.3       tidyselect_1.1.0    prettyunits_1.1.1  
[19] processx_3.4.5      compiler_4.0.4      cli_2.3.0           rvest_0.3.6         htmlTable_2.1.0     xml2_1.3.2          desc_1.2.0          labeling_0.4.2      checkmate_2.0.0    
[28] scales_1.1.1        callr_3.5.1         digest_0.6.27       foreign_0.8-81      htmltools_0.5.1.1   jpeg_0.1-8.1        base64enc_0.1-3     pkgconfig_2.0.3     sessioninfo_1.1.1  
[37] dbplyr_1.4.4        fastmap_1.1.0       htmlwidgets_1.5.3   rlang_0.4.10        readxl_1.3.1        rstudioapi_0.13     farver_2.0.3        generics_0.1.0      jsonlite_1.7.2     
[46] magrittr_2.0.1      Formula_1.2-4       Matrix_1.3-2        Rcpp_1.0.6          munsell_0.5.0       fansi_0.4.2         lifecycle_1.0.0     stringi_1.5.3       pkgbuild_1.2.0     
[55] plyr_1.8.6          grid_4.0.4          blob_1.2.1          crayon_1.4.1        lattice_0.20-41     haven_2.3.1         splines_4.0.4       hms_1.0.0           knitr_1.31         
[64] ps_1.5.0            pillar_1.4.7        pkgload_1.1.0       reprex_0.3.0        glue_1.4.2          latticeExtra_0.6-29 data.table_1.13.0   remotes_2.2.0       modelr_0.1.8       
[73] png_0.1-7           vctrs_0.3.6         testthat_3.0.2      cellranger_1.1.0    gtable_0.3.0        reshape_0.8.8       assertthat_0.2.1    cachem_1.0.4        xfun_0.21          
[82] broom_0.7.1         survival_3.2-7      pheatmap_1.0.12     memoise_2.0.0       cluster_2.1.0       ellipsis_0.3.1     

> print('Done')
[1] "Done"

> ###############################################################################
> sink()

> # Oculomics analysis, visualizations for proteomics experiment 2
> # jinquma/ cgates 
> # 3/4/2021
> 
> #setwd('/nfs/mm-isilon/bioinfcore/ActiveProj .... [TRUNCATED] 

> script_name = "exp2_diffex" 

> log_start(paste0(output_logs_dir, script_name, ".log")) 
[1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(limma)

> library(qvalue)

> library(tidyverse)

> ## Kammers K, Cole RN, Tiengwe C, Ruczinski I. Detecting Significant Changes in Protein Abundance. EuPA Open Proteom. 2015 Jun;7:11-19. doi: 10.1016 .... [TRUNCATED] 

> dat_gene<-read.table("inputs/Report_ratio_groupby=gene_protNorm=MD_gu=0.tsv", stringsAsFactors = F, header = T, row.names =1)

> pheno=read.csv("inputs/design.csv")

> batch="B"

> myplex=as.character(pheno$sample[pheno$batch==batch])

> mydat=dat_gene[names(dat_gene) %in% myplex]

> mydat =mydat %>%
+   select(-contains("Pool")) %>%
+   drop_na()

> design=pheno[pheno$sample %in% colnames(mydat),]

> design=design[match(colnames(mydat), design$sample ),]

> tr<-as.factor(as.character(design$pheno))

> design=model.matrix(~tr)

> res.eb <- eb.fit(mydat, design)

> temp=dat_gene[match(rownames(res.eb), rownames(dat_gene)),]

> res.eb$proteins=temp$Proteins

> res.eb$Gene=rownames(temp)

> res.eb1 <- res.eb %>% separate(proteins, c(NA, "protein", NA),  remove = TRUE)

> sig=subset(res.eb1, p.mod<=0.05)

> write.table(res.eb1,
+             file = paste0(output_data_dir, script_name, "-kammers.tsv"),
+             sep = "\t",
+             row.names =  .... [TRUNCATED] 

> # Oculomics analysis, visualizations for proteomics experiment 2
> # jinquma/ cgates 
> # 3/4/2021
> 
> #setwd('/nfs/mm-isilon/bioinfcore/ActiveProj .... [TRUNCATED] 

> script_name = "exp2_diffex" 

> log_start(paste0(output_logs_dir, script_name, ".log")) 
[1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(limma)

> library(qvalue)

> library(tidyverse)

> ## Kammers K, Cole RN, Tiengwe C, Ruczinski I. Detecting Significant Changes in Protein Abundance. EuPA Open Proteom. 2015 Jun;7:11-19. doi: 10.1016 .... [TRUNCATED] 

> dat_gene<-read.table("inputs/Report_ratio_groupby=gene_protNorm=MD_gu=0.tsv", stringsAsFactors = F, header = T, row.names =1)

> pheno=read.csv("inputs/design.csv")

> batch="B"

> myplex=as.character(pheno$sample[pheno$batch==batch])

> mydat=dat_gene[names(dat_gene) %in% myplex]

> mydat =mydat %>%
+   select(-contains("Pool")) %>%
+   drop_na()

> design=pheno[pheno$sample %in% colnames(mydat),]

> design=design[match(colnames(mydat), design$sample ),]

> tr<-as.factor(as.character(design$pheno))

> design=model.matrix(~tr)

> res.eb <- eb.fit(mydat, design)

> temp=dat_gene[match(rownames(res.eb), rownames(dat_gene)),]

> res.eb$proteins=temp$Proteins

> res.eb$Gene=rownames(temp)

> res.eb1 <- res.eb %>% separate(proteins, c(NA, "protein", NA),  remove = TRUE, extra = "drop")

> sig=subset(res.eb1, p.mod<=0.05)

> write.table(res.eb1,
+             file = paste0(output_data_dir, script_name, "-kammers.tsv"),
+             sep = "\t",
+             row.names =  .... [TRUNCATED] 

> print('Done')
[1] "Done"

> ###############################################################################
> log_stop()

> # Oculomics power analysis visualizations and data
> # jinquma/ cgates 
> # 2/1/2021
> 
> #setwd('/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics .... [TRUNCATED] 

> script_name = "exp2_power" 

> log_start(paste0(output_logs_dir, script_name, ".log")) 
[1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(effsize) #https://www.rdocumentation.org/packages/effsize/versions/0.8.1/topics/cohen.d

> library(RColorBrewer)

> library(ggrepel)

> library(ssize.fdr)

> library(tidyverse)

> ###############################################################################
> ## Setup data structures
> ####################################### .... [TRUNCATED] 

> design_df = read.csv("inputs/design.csv") 

> design_df = design_df[design_df$batch==batch,] %>% 
+   filter(!str_detect(sample, 'Pool'))

> design_df$phenotype <- recode(design_df$phenotype, 
+                            `PDR-Clear` = "PDR-L",
+                            `PDR-Yellow` =  .... [TRUNCATED] 

> ###############################################################################
> ## Load normalized abundance and design
> # Drop NAs to create den .... [TRUNCATED] 

> normalized_abundance_df = normalized_abundance_df %>%
+   drop_na() %>% 
+   select(design_df$sample)

> # Ensure abundance column names and phenotype row names are consistent
> design_df= design_df[match(colnames(normalized_abundance_df), design_df$sam .... [TRUNCATED] 

> ###############################################################################
> ## Model diffex across groups
> #design_matrix = model.matrix(~as. .... [TRUNCATED] 

> head(diffex_df)
           logFC     t.ord     t.mod        p.ord        p.mod        q.ord        q.mod df.r     df.0      s2.0        s2   s2.post protein
SPOCK2 -1.489906 -6.642915 -6.802237 2.347697e-07 8.564606e-08 1.610579e-05 7.105998e-06   30 3.529042 0.1937226 0.3458381 0.3298274  Q92563
PRDX2   3.879665  6.421523  6.758105 4.319221e-07 9.740904e-08 1.610579e-05 7.105998e-06   30 3.529042 0.1937226 2.5094882 2.2657462  P32119
PSMA1   1.937466  6.302876  6.549405 5.998708e-07 1.794043e-07 1.789470e-05 7.842348e-06   30 3.529042 0.1937226 0.6496263 0.6016409  P25786
GAPDH   1.946467  6.230909  6.478107 7.325309e-07 2.211921e-07 1.821006e-05 7.842348e-06   30 3.529042 0.1937226 0.6709097 0.6206842  P04406
PSMB1   2.033175  6.036469  6.290412 1.259203e-06 3.844793e-07 2.244986e-05 7.842348e-06   30 3.529042 0.1937226 0.7799313 0.7182309  P20618
GPI     0.843887  6.509857  6.289686 3.384826e-07 3.853045e-07 1.610579e-05 7.842348e-06   30 3.529042 0.1937226 0.1155310 0.1237609  P06744

> ###############################################################################
> ## Calculate the Cohen's d (Hedge-adjusted) effect size, pooled sd .... [TRUNCATED] 

> cohen_hedges_fn = function (data_row) {
+   cohen_d = cohen.d(as.matrix(data_row), phenotypes, hedges.correction=TRUE, conf.level=0.95)
+   list(del .... [TRUNCATED] 

> effect_size_df = data.frame(bind_rows(apply(normalized_abundance_df, 1, cohen_hedges_fn)), row.names=rownames(normalized_abundance_df))

> effect_size_df$abs_effect_ntile = ntile(abs(effect_size_df$effect_size), 100)

> ###############################################################################
> ## Export supplemental data table
> supplemental_data_export_df =  .... [TRUNCATED] 

> write.table(supplemental_data_export_df, 
+             paste0(output_data_dir, script_name, '-gene_effect_size_diffex.tsv'),
+             row.name .... [TRUNCATED] 

> ###############################################################################
> ## Plotting
> #################################################### .... [TRUNCATED] 

> color_pink = color_paired_palette[5]

> color_blue = color_paired_palette[2]

> color_control = colors_subphenotype[2]

> color_pdr_l = colors_subphenotype[3]

> color_pdr_m = colors_subphenotype[4]

> color_pdr_h = colors_subphenotype[5]

> ## Setup a basic df to drive plotting
> plot_df = data.frame(effect_size_df)

> plot_df$abs_effect_size = abs(plot_df$effect_size)

> plot_df$abs_confidence_interval_95_lower = ifelse(plot_df$effect_size<0, -1 * plot_df$confidence_interval_95_upper, plot_df$confidence_interval_95_l .... [TRUNCATED] 

> plot_df$abs_confidence_interval_95_upper = ifelse(plot_df$effect_size<0, -1 * plot_df$confidence_interval_95_lower, plot_df$confidence_interval_95_u .... [TRUNCATED] 

> plot_df$gene = rownames(plot_df)

> plot_df = plot_df %>% inner_join(rownames_to_column(diffex_df[,c('p.mod','q.mod')], 'gene'), by='gene')

> plot_df$inverse_pooled_sd = 1/plot_df$pooled_sd

> plot_df = plot_df %>% 
+    mutate(adjusted_p_value_f =  case_when(
+      `q.mod` <= 0.01 ~ '<= 0.01',
+      `q.mod` <= 0.05 ~ '<= 0.05',
+      ` .... [TRUNCATED] 

> plot_df$adjusted_p_value_f = factor(plot_df$adjusted_p_value_f, 
+                               levels=c("<= 0.01", "<= 0.05", "<= 0.10", "> 0.10") .... [TRUNCATED] 

> plot_df=plot_df[order(plot_df$effect_size, plot_df$gene),]

> plot_df$selected_gene = plot_df$gene %in% c("CA2", "SERPINA1", "SPINK1", "NEO1")

> plot_df$gene_label = ""

> plot_df[plot_df$selected_gene,]$gene_label = plot_df[plot_df$selected_gene,]$gene

> # HEY: be careful because while these factors are useful for plotting, you have 
> # to be deliberate and add them if you want to talk about proport .... [TRUNCATED] 

> addmargins(apv_t)

<= 0.01 <= 0.05 <= 0.10  > 0.10     Sum 
    308     144     121     154     727 

> prop.table(apv_t)

  <= 0.01   <= 0.05   <= 0.10    > 0.10 
0.4236589 0.1980743 0.1664374 0.2118294 

> ###############################################################################
> ## exp2_pvalue_histogram.pdf
> p = ggplot(plot_df, aes(x=p.mod)) + .... [TRUNCATED] 

> plot(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-pvalue_histogram.pdf'),
+        plot=p, width=10, height=10)

> ###############################################################################
> ## exp2_adjusted_pvalue_histogram.pdf
> colors <- c(rep(colors_seq .... [TRUNCATED] 

> p = ggplot(plot_df, aes(x=q.mod)) + 
+   geom_histogram(bins=100, aes(fill=adjusted_p_value_f)) +
+   scale_fill_manual(values = colors_sequential_g .... [TRUNCATED] 

> plot(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-adjusted_pvalue_histogram.pdf'),
+        plot=p, 
+        width=10, height=10)

> ###############################################################################
> ## exp2_effect_size_scatter.pdf
> p = ggplot(plot_df, aes(x=delta_ .... [TRUNCATED] 

> plot(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-effect_size_scatter.pdf'),
+        plot=p,
+        width=10, height=10)

> ###############################################################################
> ## exp2_power_estimated_effect_size_lineplot.pdf
> 
> temp_df = pl .... [TRUNCATED] 

> temp_df$x = seq.int(nrow(temp_df))

> tail(temp_df,1)
    delta_mean pooled_sd effect_size confidence_interval_95_lower confidence_interval_95_upper abs_effect_ntile abs_effect_size abs_confidence_interval_95_lower
667   1.452345   0.58808    2.469639                     1.492827                      3.44645              100        2.469639                         1.492827
    abs_confidence_interval_95_upper   gene        p.mod        q.mod inverse_pooled_sd adjusted_p_value_f selected_gene gene_label   x
667                          3.44645 SPOCK2 8.564606e-08 7.105998e-06          1.700449            <= 0.01         FALSE            727

> p = ggplot(temp_df, 
+            aes(x=x, y=abs_effect_size, color=adjusted_p_value_f)) + 
+   scale_color_manual(breaks=c('<= 0.01', '<= 0.05', '< .... [TRUNCATED] 

> plot(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-estimated_effect_size_lineplot.pdf'),
+        plot=p,
+        width=10, height=10)

> ###############################################################################
> ## exp2_select_genes_phenotype_boxplots.pdf
> gene_sample_values = .... [TRUNCATED] 

> tall_gene_sample_values = cbind(gene_sample_values[c("sample", "pheno")], stack(gene_sample_values[plot_df$gene[plot_df$selected_gene]]))

> colnames(tall_gene_sample_values) = c('sample', 'pheno', 'values', 'gene')

> tall_gene_sample_values$gene_f = factor(tall_gene_sample_values$gene, levels=c('SERPINA1', 'NEO1', 'SPINK1', 'CA2'))

> tall_gene_sample_values$phenotype = factor(tall_gene_sample_values$pheno, levels=c('PDR', 'Control'))

> p = ggplot(tall_gene_sample_values, aes(x=phenotype, y=values, fill = phenotype)) +
+   geom_violin(linetype='blank') +
+   stat_summary(fun.data=me .... [TRUNCATED] 

> plot(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-select_genes_phenotype_boxplots.pdf'), 
+        plot=p,
+        width=10, height=10)

> ###############################################################################
> ## exp2_power_select_genes_qqplots.pdf
> p = ggplot(tall_gene_samp .... [TRUNCATED] 

> plot(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-select_genes_qqplots.pdf'), 
+        plot=p,
+        width=10, height=10)

> temp_df= tall_gene_sample_values[tall_gene_sample_values$gene=='CA2' & tall_gene_sample_values$phenotype=='PDR',]

> shapiro.test(temp_df$values)

	Shapiro-Wilk normality test

data:  temp_df$values
W = 0.92568, p-value = 0.09972


> ###############################################################################
> ## exp2_select_genes_subphenotype_boxplots.pdf
> gene_sample_value .... [TRUNCATED] 

> tall_gene_sample_values = cbind(gene_sample_values[c("sample", "phenotype")], stack(gene_sample_values[plot_df$gene[plot_df$selected_gene]]))

> colnames(tall_gene_sample_values) = c('sample', 'phenotype', 'values', 'gene')

> tall_gene_sample_values$gene_f = factor(tall_gene_sample_values$gene, levels=c('SERPINA1', 'NEO1', 'SPINK1', 'CA2'))

> tall_gene_sample_values$phenotype = factor(tall_gene_sample_values$phenotype, levels=c('PDR-H', 'PDR-M', 'PDR-L', 'Control'))

> pheno_colors = c(color_pdr_h, color_pdr_m, color_pdr_l, color_control)

> p = ggplot(tall_gene_sample_values, aes(x=phenotype, y=values, fill = phenotype)) +
+   geom_violin(linetype='blank') +
+   stat_summary(fun.data=me .... [TRUNCATED] 

> plot(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-select_genes_subphenotype_boxplots.pdf'),
+        plot=p,
+        width=10, height=10)

> ###############################################################################
> ## exp2_prospective_power_by_effect_size.pdf
> named_genes = c('CA .... [TRUNCATED] 

> power_fn <- function(x) {
+   fdr = 0.05
+   desired_power = 0.8
+   pi0 = 0.7
+   max_samples = 25
+   power=ssize.twoSamp(delta = as.double(x[2]), .... [TRUNCATED] 

> temp = plot_df[plot_df$gene %in% named_genes, c('gene', 'delta_mean', 'pooled_sd', 'abs_effect_ntile')]

> rownames(temp) = temp$gene

> temp$gene_factor = paste0(temp$gene, " (", temp$abs_effect_ntile, "%)")

> power_df = do.call(rbind, apply(temp[, c('gene', 'delta_mean', 'pooled_sd')], 1, power_fn)) 

> power_df = power_df %>% inner_join(temp[,c('gene', 'gene_factor')])

> power_df$gene_factor=factor(power_df$gene_factor, levels = temp[named_genes, 'gene_factor'])

> p = ggplot(power_df, aes(x=n, y=power, color=gene_factor)) +
+   theme_classic() +
+   theme(text = element_text(size=30), 
+         legend.positio .... [TRUNCATED] 

> plot(p)

> ggsave(filename=paste0(output_figures_dir, script_name, '-prospective_power_by_effect_size.pdf'), 
+        plot=p, width=10, height=10)

> print('Done')
[1] "Done"

> ###############################################################################
> log_stop()

> # Oculomics analysis, visualizations for proteomics experiment 2
> # jinquma/ cgates 
> # 3/5/2021
> 
> #setwd('/nfs/mm-isilon/bioinfcore/ActiveProj .... [TRUNCATED] 

> script_name = "exp2_figures_diffex" 

> log_start(paste0(output_logs_dir, script_name, ".log")) 
[1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(tidyverse)

> library(RColorBrewer)

> ###############################################################################
> ## Setup data structures
> ####################################### .... [TRUNCATED] 

> # Oculomics analysis, visualizations for proteomics experiment 2
> # jinquma/ cgates 
> # 3/5/2021
> 
> #setwd('/nfs/mm-isilon/bioinfcore/ActiveProj .... [TRUNCATED] 

> script_name = "exp2_figures_diffex" 

> log_start(paste0(output_logs_dir, script_name, ".log")) 
[1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(tidyverse)

> library(RColorBrewer)

> ###############################################################################
> ## Setup data structures
> ####################################### .... [TRUNCATED] 

> head(diffex_df)
           logFC     t.ord     t.mod        p.ord        p.mod        q.ord        q.mod df.r     df.0      s2.0        s2   s2.post protein
SPOCK2 -1.489906 -6.642915 -6.802237 2.347697e-07 8.564606e-08 1.610579e-05 7.105998e-06   30 3.529042 0.1937226 0.3458381 0.3298274  Q92563
PRDX2   3.879665  6.421523  6.758105 4.319221e-07 9.740904e-08 1.610579e-05 7.105998e-06   30 3.529042 0.1937226 2.5094882 2.2657462  P32119
PSMA1   1.937466  6.302876  6.549405 5.998708e-07 1.794043e-07 1.789470e-05 7.842348e-06   30 3.529042 0.1937226 0.6496263 0.6016409  P25786
GAPDH   1.946467  6.230909  6.478107 7.325309e-07 2.211921e-07 1.821006e-05 7.842348e-06   30 3.529042 0.1937226 0.6709097 0.6206842  P04406
PSMB1   2.033175  6.036469  6.290412 1.259203e-06 3.844793e-07 2.244986e-05 7.842348e-06   30 3.529042 0.1937226 0.7799313 0.7182309  P20618
GPI     0.843887  6.509857  6.289686 3.384826e-07 3.853045e-07 1.610579e-05 7.842348e-06   30 3.529042 0.1937226 0.1155310 0.1237609  P06744

> q_value_cutoff = 0.05

> p_value_cutoff = max(diffex_df[diffex_df$q.mod <= q_value_cutoff,]$p.mod)

> diffex_df[diffex_df$p.mod>0.154 & diffex_df$p.mod<0.155,]
        logFC     t.ord     t.mod     p.ord     p.mod      q.ord      q.mod df.r     df.0      s2.0        s2   s2.post protein
C6 -0.2555194 -1.450502 -1.457574 0.1572948 0.1542613 0.05167672 0.04979368   30 3.529042 0.1937226 0.2133457 0.2112803  P13671

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> protein_accession = read.table("inputs/Report_ratio_groupby=gene_protNorm=MD_gu=0.tsv", stringsAsFactors = F, header = T, row.names =1) %>%
+   sele .... [TRUNCATED] 

> plasma = readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%
+   select("Accession (Uniprot)", "Depleted by Pie ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma_proteins = protein_accession %>% rownames_to_column(var='gene') %>% left_join(plasma) %>% drop_na()

> ###############################################################################
> ## Plotting
> #################################################### .... [TRUNCATED] 

> sig_cutoff=p_value_cutoff

> # Add direction column
> diffex_df$direction = 'NS'

> diffex_df$direction[diffex_df$p.mod<=sig_cutoff & diffex_df$logFC <= 0] = 'Down'

> diffex_df$direction[diffex_df$p.mod<=sig_cutoff & diffex_df$logFC > 0] = 'Up'

> # Determine direction labels (with number per)
> direction_table = table(diffex_df$direction)

> # up_label = sprintf('Up: %s', direction_table['Up'])
> # down_label = sprintf('Down: %s', direction_table['Down'])
> # ns_label = sprintf('adj p-va .... [TRUNCATED] 

> # if(all( !( c('Up', 'Downl') %in% names(direction_table) ) )) {
> #   warning(sprintf('No genes were DE at fdr < %s and |log2fc| > %s. Consider a d .... [TRUNCATED] 

> diffex_df$protein_type = 'other'

> diffex_df$protein_type[rownames(diffex_df) %in% erythrocyte_gene_symbols] = 'RBC'

> diffex_df$protein_type[rownames(diffex_df) %in% plasma_proteins$gene] = 'plasma'

> #table(diffex_df$protein_type)
> 
> # Add top 10 Up and 10 Down gene labels
> # de_list is assumed to be ordered by Call/diff_exp and then qvalue fr .... [TRUNCATED] 

> plot(volcano_plot)

> ggsave(filename = paste0(output_figures_dir, script_name, '-volcano.pdf'),
+        plot = volcano_plot,
+        height = 6, width = 8)

> ###############################################################################
> 
> diffex_df$logfc_cutoff = ifelse(abs(diffex_df$logFC) >= logfc_c .... [TRUNCATED] 

> diffex_df$adj_pval_cutoff = ifelse(diffex_df$log10_p_mod > -log10(sig_cutoff), 'apv <= 0.05', 'apv > 0.05')

> table(diffex_df$adj_pval_cutoff, diffex_df$logfc_cutoff)
             
              <1.5FC >=1.5 FC
  apv <= 0.05    242      209
  apv > 0.05     274        2

> cross_tab_df = as.data.frame.matrix(addmargins(table(diffex_df$adj_pval_cutoff, diffex_df$logfc_cutoff)))

> cross_tab_df
            <1.5FC >=1.5 FC Sum
apv <= 0.05    242      209 451
apv > 0.05     274        2 276
Sum            516      211 727

> write.table(cross_tab_df, 
+             file = paste0(output_data_dir, script_name, "-diffex_crosstable.tsv"),
+             sep = "\t", row.names  .... [TRUNCATED] 

> ###############################################################################
> 
> sessionInfo()
R version 4.0.4 (2021-02-15)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Catalina 10.15.7

Matrix products: default
BLAS:   /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] qvalue_2.2.2       ssize.fdr_1.2      ggrepel_0.8.2      effsize_0.8.1      ComplexUpset_1.0.3 devtools_2.3.2     usethis_2.0.1      RColorBrewer_1.1-2 forcats_0.5.1     
[10] stringr_1.4.0      dplyr_1.0.2        purrr_0.3.4        readr_1.4.0        tidyr_1.1.2        tibble_3.0.6       tidyverse_1.3.0    patchwork_1.0.1    GGally_2.1.0      
[19] ggplot2_3.3.2      cowplot_1.1.0      limma_3.44.3      

loaded via a namespace (and not attached):
 [1] fs_1.5.0            lubridate_1.7.9.2   progress_1.2.2      httr_1.4.2          rprojroot_2.0.2     tools_4.0.4         backports_1.2.1     utf8_1.1.4          R6_2.5.0           
[10] rpart_4.1-15        Hmisc_4.4-2         DBI_1.1.1           colorspace_2.0-0    nnet_7.3-15         withr_2.4.1         gridExtra_2.3       tidyselect_1.1.0    prettyunits_1.1.1  
[19] processx_3.4.5      compiler_4.0.4      cli_2.3.0           rvest_0.3.6         htmlTable_2.1.0     xml2_1.3.2          desc_1.2.0          labeling_0.4.2      checkmate_2.0.0    
[28] scales_1.1.1        callr_3.5.1         digest_0.6.27       foreign_0.8-81      htmltools_0.5.1.1   jpeg_0.1-8.1        base64enc_0.1-3     pkgconfig_2.0.3     sessioninfo_1.1.1  
[37] dbplyr_1.4.4        fastmap_1.1.0       htmlwidgets_1.5.3   rlang_0.4.10        readxl_1.3.1        rstudioapi_0.13     farver_2.0.3        generics_0.1.0      jsonlite_1.7.2     
[46] magrittr_2.0.1      Formula_1.2-4       Matrix_1.3-2        Rcpp_1.0.6          munsell_0.5.0       fansi_0.4.2         lifecycle_1.0.0     stringi_1.5.3       pkgbuild_1.2.0     
[55] plyr_1.8.6          grid_4.0.4          blob_1.2.1          crayon_1.4.1        lattice_0.20-41     haven_2.3.1         splines_4.0.4       hms_1.0.0           knitr_1.31         
[64] ps_1.5.0            pillar_1.4.7        reshape2_1.4.4      pkgload_1.1.0       reprex_0.3.0        glue_1.4.2          latticeExtra_0.6-29 data.table_1.13.0   remotes_2.2.0      
[73] modelr_0.1.8        png_0.1-7           vctrs_0.3.6         testthat_3.0.2      cellranger_1.1.0    gtable_0.3.0        reshape_0.8.8       assertthat_0.2.1    cachem_1.0.4       
[82] xfun_0.21           broom_0.7.1         survival_3.2-7      pheatmap_1.0.12     memoise_2.0.0       cluster_2.1.0       ellipsis_0.3.1     

> print('Done')
[1] "Done"

> ###############################################################################
> log_stop()

> # Oculomics analysis, visualizations for proteomics experiment 2
> # jinquma/ cgates 
> # 2/10/2021
> 
> #setwd('/nfs/mm-isilon/bioinfcore/ActivePro .... [TRUNCATED] 

> script_name = "exp2_figures" 

> log_start(paste0(output_logs_dir, script_name, ".log")) 
[1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(GGally)

> library(tidyverse)

> library(RColorBrewer)

> ###############################################################################
> ## Setup data structures
> ####################################### .... [TRUNCATED] 

> dat_gene <- dat_gene %>% rename(
+   Pool1.6=Pool12,
+   Pool1.7=Pool13,
+   Pool1.8=Pool14,
+   Pool1.9=Pool15
+ )

> #view(dat_gene)
> 
> ###############################################################################
> ## Load sample phenotype design
> # Focus to  .... [TRUNCATED] 

> pheno$sample <- recode(pheno$sample, 
+    `Pool12`="Pool1.6",
+    `Pool13`="Pool1.7",
+    `Pool14`="Pool1.8",
+    `Pool15`="Pool1.9")

> #pheno$sample
> 
> batch="B"

> myplex=as.character(pheno$sample[pheno$batch==batch])

> #view(myplex)
> all_abundances = dat_gene[names(dat_gene) %in% myplex]

> mydat = dat_gene[names(dat_gene) %in% myplex]

> mydat = mydat %>% drop_na() # Drop NAs to create dense matrix

> #colnames(mydat)
> 
> design=pheno[pheno$sample %in% colnames(mydat),]

> #Reset phenotype names
> design$phenotype <- recode(design$phenotype, 
+        `PDR-Clear` = "PDR-L",
+        `PDR-Yellow` = "PDR-M",
+        `PD .... [TRUNCATED] 

> design=design[match(colnames(mydat), design$sample ),]

> #rownames_to_column(head(mydat), var='protein')
> 
> 
> ###############################################################################
> ## Plottin .... [TRUNCATED] 

> temp_df$sample_f = factor(temp_df$sample)

> temp_df$sample_f = reorder(temp_df$sample_f, temp_df$plex)

> temp_df$plex_f = factor(temp_df$plex, levels=c('1','2','3','4'), ordered=TRUE)

> temp_df = temp_df[order(temp_df$plex_f, temp_df$sample_f),]

> #temp_df = na.omit(temp_df)
> plex_colors = colors_sequential_greens

> p = ggplot(temp_df, aes(x=sample_f, y=protein_abundance, fill=plex_f)) +
+   geom_boxplot(color=alpha('black', 0.7)) +
+   scale_fill_manual(values= .... [TRUNCATED] 

> plot(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-normalized_abundance_boxplot.pdf'), 
+        plot = p, 
+        width = 10, height = 1 .... [TRUNCATED] 

> ###############################################################################
> ## exp2_pairwise_scatter_pools.pdf
> 
> p_ <- GGally::print_if_int .... [TRUNCATED] 

> grid.draw.gg <- function(x){
+   print(x)
+ }

> # A custom upper function that simplifies the correlation matrix to suppress
> # the "Corr:" label
> upper_fn <- function(
+   data,
+   mapping,
+  .... [TRUNCATED] 

> # Ensures the scales are consistent across subplots
> lower_fun <- function(data,mapping, min_all, max_all){
+   ggplot(data = data, mapping = mappi .... [TRUNCATED] 

> # Just print the sample names on the diag
> diag_fn <- function (data, mapping) {
+   label <- gsub('`', '', mapping_string(mapping$x))
+   p <- gga .... [TRUNCATED] 

> temp_normalized_pools_df = mydat %>% select(starts_with('Pool'))

> #view(temp_normalized_pools_df)
> 
> max_all = max(temp_normalized_pools_df)

> min_all = min(temp_normalized_pools_df)

> p = ggpairs(temp_normalized_pools_df,
+             lower = list(continuous = wrap(lower_fun, min_all=min_all, max_all=max_all)),
+             uppe .... [TRUNCATED] 

> p_(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-pairwise_scatter_pools.pdf'), 
+        plot = p, 
+        width = 10, height = 10)

> ###############################################################################
> ## exp2_pca.pdf
> 
> pc = prcomp(t(mydat))

> temp = summary(pc)

> plex_shapes = c(19, 17, 15, 18)

> proportion_variance = 100 * round(summary(pc)$importance[2,][1:2], 2)

> datt=data.frame(pheno=design$pheno,
+                 plex=factor(design$plex),
+                 PCA=pc$x[,1:2],
+                 sample=design$sa .... [TRUNCATED] 

> #view(datt)
> p=ggplot(datt, aes(x=PCA.PC1, y=PCA.PC2, shape=plex, color=phenotype)) + 
+   geom_point(size=5) +
+   scale_color_manual(values = col .... [TRUNCATED] 

> plot(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-pca.pdf'), 
+        plot = p, 
+        width = 10, height = 6.6)

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: all proteins
> ## ex .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE)

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annotated_protein_accession$erythrocyte),
+   .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> ggsave(filename = paste0(output_figures_dir, script_name, '-pca.pdf'), 
+        plot = p, 
+        width = 10, height = 6.6)

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_all_annotated.pdf'),
+     width=14,
+     height=10)

> pheatmap::pheatmap(
+   mydat,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_row = ann .... [TRUNCATED] 

> dev.off()
pdf 
  4 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Exclude plasma and e .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE)

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[!(rowSums(is.na(annotation_row)) != ncol(annotation_row)),]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_exclude_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  2 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Only plasma and eryt .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE)

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[rowSums(is.na(annotation_row)) <2,]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_only_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  3 

> print('Done')
[1] "Done"

> ###############################################################################
> log_stop()
ex_f = factor(temp_df$plex, levels=c('1','2','3','4'), ordered=TRUE)

> temp_df = temp_df[order(temp_df$plex_f, temp_df$sample_f),]

> #temp_df = na.omit(temp_df)
> plex_colors = colors_sequential_greens

> p = ggplot(temp_df, aes(x=sample_f, y=protein_abundance, fill=plex_f)) +
+   geom_boxplot(color=alpha('black', 0.7)) +
+   scale_fill_manual(values= .... [TRUNCATED] 

> plot(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-normalized_abundance_boxplot.pdf'), 
+        plot = p, 
+        width = 10, height = 1 .... [TRUNCATED] 

> ###############################################################################
> ## exp2_pairwise_scatter_pools.pdf
> 
> p_ <- GGally::print_if_int .... [TRUNCATED] 

> grid.draw.gg <- function(x){
+   print(x)
+ }

> # A custom upper function that simplifies the correlation matrix to suppress
> # the "Corr:" label
> upper_fn <- function(
+   data,
+   mapping,
+  .... [TRUNCATED] 

> # Ensures the scales are consistent across subplots
> lower_fun <- function(data,mapping, min_all, max_all){
+   ggplot(data = data, mapping = mappi .... [TRUNCATED] 

> # Just print the sample names on the diag
> diag_fn <- function (data, mapping) {
+   label <- gsub('`', '', mapping_string(mapping$x))
+   p <- gga .... [TRUNCATED] 

> temp_normalized_pools_df = mydat %>% select(starts_with('Pool'))

> #view(temp_normalized_pools_df)
> 
> max_all = max(temp_normalized_pools_df)

> min_all = min(temp_normalized_pools_df)

> p = ggpairs(temp_normalized_pools_df,
+             lower = list(continuous = wrap(lower_fun, min_all=min_all, max_all=max_all)),
+             uppe .... [TRUNCATED] 

> p_(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-pairwise_scatter_pools.pdf'), 
+        plot = p, 
+        width = 10, height = 10)

> ###############################################################################
> ## exp2_pca.pdf
> 
> pc = prcomp(t(mydat))

> temp = summary(pc)

> plex_shapes = c(19, 17, 15, 18)

> proportion_variance = 100 * round(summary(pc)$importance[2,][1:2], 2)

> datt=data.frame(pheno=design$pheno,
+                 plex=factor(design$plex),
+                 PCA=pc$x[,1:2],
+                 sample=design$sa .... [TRUNCATED] 

> #view(datt)
> p=ggplot(datt, aes(x=PCA.PC1, y=PCA.PC2, shape=plex, color=phenotype)) + 
+   geom_point(size=5) +
+   scale_color_manual(values = col .... [TRUNCATED] 

> plot(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-pca.pdf'), 
+        plot = p, 
+        width = 10, height = 6.6)

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: all proteins
> ## ex .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE)

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annotated_protein_accession$erythrocyte),
+   .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> ggsave(filename = paste0(output_figures_dir, script_name, '-pca.pdf'), 
+        plot = p, 
+        width = 10, height = 6.6)

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_all_annotated.pdf'),
+     width=14,
+     height=10)

> pheatmap::pheatmap(
+   mydat,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_row = ann .... [TRUNCATED] 

> dev.off()
pdf 
  4 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Exclude plasma and e .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE)

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[!(rowSums(is.na(annotation_row)) != ncol(annotation_row)),]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_exclude_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  2 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Only plasma and eryt .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE)

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[rowSums(is.na(annotation_row)) <2,]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_only_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  3 

> print('Done')
[1] "Done"

> ###############################################################################
> log_stop()
