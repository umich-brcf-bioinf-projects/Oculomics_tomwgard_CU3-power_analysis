[1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(GGally)

> library(tidyverse)

> library(RColorBrewer)

> ###############################################################################
> ## Setup data structures
> ####################################### .... [TRUNCATED] 

> dat_gene <- dat_gene %>% rename(
+   Pool1.6=Pool12,
+   Pool1.7=Pool13,
+   Pool1.8=Pool14,
+   Pool1.9=Pool15
+ )

> #view(dat_gene)
> 
> ###############################################################################
> ## Load sample phenotype design
> # Focus to  .... [TRUNCATED] 

> pheno$sample <- recode(pheno$sample, 
+    `Pool12`="Pool1.6",
+    `Pool13`="Pool1.7",
+    `Pool14`="Pool1.8",
+    `Pool15`="Pool1.9")

> #pheno$sample
> 
> pheno$plex <- recode(pheno$plex, 
+                      `0`="1",
+                      `1`="2.1",
+                      `2`="2 ..." ... [TRUNCATED] 

> #pheno$plex
> 
> batch="B"

> myplex=as.character(pheno$sample[pheno$batch==batch])

> #view(myplex)
> all_abundances = dat_gene[names(dat_gene) %in% myplex]

> mydat = dat_gene[names(dat_gene) %in% myplex]

> mydat = mydat %>% drop_na() # Drop NAs to create dense matrix

> #colnames(mydat)
> 
> design=pheno[pheno$sample %in% colnames(mydat),]

> #Reset phenotype names
> design$phenotype <- recode(design$phenotype, 
+        `PDR-Clear` = "PDR-L",
+        `PDR-Yellow` = "PDR-M",
+        `PD .... [TRUNCATED] 

> design=design[match(colnames(mydat), design$sample ),]

> #rownames_to_column(head(mydat), var='protein')
> 
> 
> ###############################################################################
> ## Plottin .... [TRUNCATED] 

> temp_df$sample_f = factor(temp_df$sample, 
+                           levels=unique(temp_df$sample[order(temp_df$plex, temp_df$sample)])
+          .... [TRUNCATED] 

> #temp_df$sample_f = reorder(temp_df$plex, temp_df$sample_f)
> levels(temp_df$sample_f)
 [1] "Pool1.6" "PPV193"  "PPV229"  "PPV232"  "PPV423"  "PPV503"  "PPV508"  "PPV516"  "PPV526"  "Pool1.7" "PPV242"  "PPV334"  "PPV377"  "PPV554"  "PPV661"  "PPV715"  "PPV728"  "PPV808" 
[19] "Pool1.8" "PPV519"  "PPV546"  "PPV780"  "PPV842"  "PPV856"  "PPV890"  "PPV934"  "PPV942"  "Pool1.9" "PPV315"  "PPV414"  "PPV449"  "PPV523"  "PPV632"  "PPV682"  "PPV875"  "PPV988" 

> temp_df$plex_f = factor(temp_df$plex, levels=c('2.1','2.2','2.3','2.4'), ordered=TRUE)

> temp_df = temp_df[order(temp_df$plex_f, temp_df$sample_f),]

> #temp_df = na.omit(temp_df)
> plex_colors = colors_sequential_greens

> p = ggplot(temp_df, aes(x=sample_f, y=protein_abundance, fill=plex_f)) +
+   geom_boxplot(color=alpha('black', 0.7)) +
+   scale_fill_manual(values= .... [TRUNCATED] 

> plot(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-normalized_abundance_boxplot.pdf'), 
+        plot = p, 
+        width = 10, height = 1 .... [TRUNCATED] 

> ###############################################################################
> ## exp2_pairwise_scatter_pools.pdf
> 
> p_ <- GGally::print_if_int .... [TRUNCATED] 

> grid.draw.gg <- function(x){
+   print(x)
+ }

> # A custom upper function that simplifies the correlation matrix to suppress
> # the "Corr:" label
> upper_fn <- function(
+   data,
+   mapping,
+  .... [TRUNCATED] 

> # Ensures the scales are consistent across subplots
> lower_fun <- function(data,mapping, min_all, max_all){
+   ggplot(data = data, mapping = mappi .... [TRUNCATED] 

> # Just print the sample names on the diag
> diag_fn <- function (data, mapping) {
+   label <- gsub('`', '', mapping_string(mapping$x))
+   p <- gga .... [TRUNCATED] 

> temp_normalized_pools_df = mydat %>% select(starts_with('Pool'))

> #view(temp_normalized_pools_df)
> 
> max_all = max(temp_normalized_pools_df)

> min_all = min(temp_normalized_pools_df)

> p = ggpairs(temp_normalized_pools_df,
+             lower = list(continuous = wrap(lower_fun, min_all=min_all, max_all=max_all)),
+             uppe .... [TRUNCATED] 

> p_(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-pairwise_scatter_pools.pdf'), 
+        plot = p, 
+        width = 10, height = 10)

> ###############################################################################
> ## pca.pdf
> 
> pc = prcomp(t(mydat))

> temp = summary(pc)

> plex_shapes = c(19, 17, 15, 18)

> proportion_variance = 100 * round(summary(pc)$importance[2,][1:2], 2)

> datt=data.frame(pheno=design$pheno,
+                 plex=factor(design$plex),
+                 PCA=pc$x[,1:2],
+                 sample=design$sa .... [TRUNCATED] 

> #view(datt)
> p=ggplot(datt, aes(x=PCA.PC1, y=PCA.PC2, shape=plex, color=phenotype)) + 
+   geom_point(size=5) +
+   scale_color_manual(values = col .... [TRUNCATED] 

> plot(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-pca.pdf'), 
+        plot = p, 
+        width = 10, height = 6.6)

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: all proteins
> ## ex .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE)

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annotated_protein_accession$erythrocyte),
+   .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_all_annotated.pdf'),
+     width=14,
+     height=10)

> pheatmap::pheatmap(
+   mydat,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_row = ann .... [TRUNCATED] 

> dev.off()
pdf 
  4 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Exclude plasma and e .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE, extra = "drop")

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[!(rowSums(is.na(annotation_row)) != ncol(annotation_row)),]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_exclude_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  2 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Only plasma and eryt .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE, extra = 'drop')

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[rowSums(is.na(annotation_row)) <2,]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_only_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  3 

> print('Done')
[1] "Done"

> ###############################################################################
> log_stop()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 [1] "/Volumes/nfs/mm-isilon/bioinfcore/ActiveProjects/Oculomics_tomwgard_CU3-power_analysis_cgates_jingquma/cgates_analysis"

> library(GGally)

> library(tidyverse)

> library(RColorBrewer)

> ###############################################################################
> ## Setup data structures
> ####################################### .... [TRUNCATED] 

> dat_gene <- dat_gene %>% rename(
+   Pool1.6=Pool12,
+   Pool1.7=Pool13,
+   Pool1.8=Pool14,
+   Pool1.9=Pool15
+ )

> #view(dat_gene)
> 
> ###############################################################################
> ## Load sample phenotype design
> # Focus to  .... [TRUNCATED] 

> pheno$sample <- recode(pheno$sample, 
+    `Pool12`="Pool1.6",
+    `Pool13`="Pool1.7",
+    `Pool14`="Pool1.8",
+    `Pool15`="Pool1.9")

> #pheno$sample
> 
> pheno$plex <- recode(pheno$plex, 
+                      `0`="1",
+                      `1`="2.1",
+                      `2`="2 ..." ... [TRUNCATED] 

> #pheno$plex
> 
> batch="B"

> myplex=as.character(pheno$sample[pheno$batch==batch])

> #view(myplex)
> all_abundances = dat_gene[names(dat_gene) %in% myplex]

> mydat = dat_gene[names(dat_gene) %in% myplex]

> mydat = mydat %>% drop_na() # Drop NAs to create dense matrix

> #colnames(mydat)
> 
> design=pheno[pheno$sample %in% colnames(mydat),]

> #Reset phenotype names
> design$phenotype <- recode(design$phenotype, 
+        `PDR-Clear` = "PDR-L",
+        `PDR-Yellow` = "PDR-M",
+        `PD .... [TRUNCATED] 

> design=design[match(colnames(mydat), design$sample ),]

> #rownames_to_column(head(mydat), var='protein')
> 
> 
> ###############################################################################
> ## Plottin .... [TRUNCATED] 

> temp_df$sample_f = factor(temp_df$sample, 
+                           levels=unique(temp_df$sample[order(temp_df$plex, temp_df$sample)])
+          .... [TRUNCATED] 

> #temp_df$sample_f = reorder(temp_df$plex, temp_df$sample_f)
> levels(temp_df$sample_f)
 [1] "Pool1.6" "PPV193"  "PPV229"  "PPV232"  "PPV423"  "PPV503"  "PPV508"  "PPV516"  "PPV526"  "Pool1.7" "PPV242"  "PPV334"  "PPV377"  "PPV554"  "PPV661"  "PPV715"  "PPV728"  "PPV808" 
[19] "Pool1.8" "PPV519"  "PPV546"  "PPV780"  "PPV842"  "PPV856"  "PPV890"  "PPV934"  "PPV942"  "Pool1.9" "PPV315"  "PPV414"  "PPV449"  "PPV523"  "PPV632"  "PPV682"  "PPV875"  "PPV988" 

> temp_df$plex_f = factor(temp_df$plex, levels=c('2.1','2.2','2.3','2.4'), ordered=TRUE)

> temp_df = temp_df[order(temp_df$plex_f, temp_df$sample_f),]

> #temp_df = na.omit(temp_df)
> plex_colors = colors_sequential_greens

> p = ggplot(temp_df, aes(x=sample_f, y=protein_abundance, fill=plex_f)) +
+   geom_boxplot(color=alpha('black', 0.7)) +
+   scale_fill_manual(values= .... [TRUNCATED] 

> plot(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-normalized_abundance_boxplot.pdf'), 
+        plot = p, 
+        width = 10, height = 1 .... [TRUNCATED] 

> ###############################################################################
> ## exp2_pairwise_scatter_pools.pdf
> 
> p_ <- GGally::print_if_int .... [TRUNCATED] 

> grid.draw.gg <- function(x){
+   print(x)
+ }

> # A custom upper function that simplifies the correlation matrix to suppress
> # the "Corr:" label
> upper_fn <- function(
+   data,
+   mapping,
+  .... [TRUNCATED] 

> # Ensures the scales are consistent across subplots
> lower_fun <- function(data,mapping, min_all, max_all){
+   ggplot(data = data, mapping = mappi .... [TRUNCATED] 

> # Just print the sample names on the diag
> diag_fn <- function (data, mapping) {
+   label <- gsub('`', '', mapping_string(mapping$x))
+   p <- gga .... [TRUNCATED] 

> temp_normalized_pools_df = mydat %>% select(starts_with('Pool'))

> #view(temp_normalized_pools_df)
> 
> max_all = max(temp_normalized_pools_df)

> min_all = min(temp_normalized_pools_df)

> p = ggpairs(temp_normalized_pools_df,
+             lower = list(continuous = wrap(lower_fun, min_all=min_all, max_all=max_all)),
+             uppe .... [TRUNCATED] 

> p_(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-pairwise_scatter_pools.pdf'), 
+        plot = p, 
+        width = 10, height = 10)

> ###############################################################################
> ## pca.pdf
> 
> pc = prcomp(t(mydat))

> temp = summary(pc)

> plex_shapes = c(19, 17, 15, 18)

> proportion_variance = 100 * round(summary(pc)$importance[2,][1:2], 2)

> datt=data.frame(pheno=design$pheno,
+                 plex=factor(design$plex),
+                 PCA=pc$x[,1:2],
+                 sample=design$sa .... [TRUNCATED] 

> #view(datt)
> p=ggplot(datt, aes(x=PCA.PC1, y=PCA.PC2, shape=plex, color=phenotype)) + 
+   geom_point(size=5) +
+   scale_color_manual(values = col .... [TRUNCATED] 

> plot(p)

> ggsave(filename = paste0(output_figures_dir, script_name, '-pca.pdf'), 
+        plot = p, 
+        width = 10, height = 6.6)

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: all proteins
> ## ex .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE)

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annotated_protein_accession$erythrocyte),
+   .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_all_annotated.pdf'),
+     width=14,
+     height=10)

> pheatmap::pheatmap(
+   mydat,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_row = ann .... [TRUNCATED] 

> dev.off()
pdf 
  4 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Exclude plasma and e .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE, extra = "drop")

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[!(rowSums(is.na(annotation_row)) != ncol(annotation_row)),]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_exclude_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  2 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Only plasma and eryt .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE, extra = 'drop')

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[rowSums(is.na(annotation_row)) <2,]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_only_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  3 

> print('Done')
[1] "Done"

> ###############################################################################
> log_stop()
-/                                                                                                                                                                                            null device 
          1 
null device 
          1 
NULL
-/                                                                                                                                                                                            null device 
          1 
-/                                                                                                                                                                                            NULL
null device 
          1 
-/                                                                                                                                                                                            null device 
          1 
null device 
          1 
 but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annotated_protein_accession$erythrocyte),
+   .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_all_annotated.pdf'),
+     width=14,
+     height=10)

> pheatmap::pheatmap(
+   mydat,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_row = ann .... [TRUNCATED] 

> dev.off()
pdf 
  4 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Exclude plasma and e .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE, extra = "drop")

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[!(rowSums(is.na(annotation_row)) != ncol(annotation_row)),]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_exclude_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  2 

> ###############################################################################
> ## Heatmap annotated with plasma/erythrocyte: Only plasma and eryt .... [TRUNCATED] 

> protein_accession <- protein %>% separate(Proteins, c(NA, "uniprot", NA),  sep="\\|", remove = TRUE, extra = 'drop')

> #head(protein_accession)
> 
> plasma=readxl::read_xlsx("inputs/List_20 Plasma Proteins_Uniprot Accession.xlsx", skip = 2) %>%select("Accession (Unip ..." ... [TRUNCATED] 
-/                                                                                                                                                                                            
> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[1:14]="Yes"

> plasma$`Depleted by Pierce Top12 Column (Yes/No)`[15:23]="No"

> plasma = plasma %>% rename("uniprot"="Accession (Uniprot)", plasma="Depleted by Pierce Top12 Column (Yes/No)")

> annotated_protein_accession = protein_accession %>% left_join(plasma)

> rownames(annotated_protein_accession) = rownames(protein_accession)

> annotated_protein_accession$plasma = recode(annotated_protein_accession$plasma,
+                                             "Yes"= "depleted but p ..." ... [TRUNCATED] 

> erythrocyte_gene_symbols = c("ACTB", "HBG2", "CA2", "HBA1", "HBB", "HBD", "BLVRB", "BPGM", "PRDX2", "CA1", "CAT")

> annotated_protein_accession$erythrocyte = rownames(annotated_protein_accession) %in% erythrocyte_gene_symbols

> annotated_protein_accession$erythrocyte = ifelse(annotated_protein_accession$erythrocyte=="TRUE", "present", NA)

> #head(annotated_protein_accession)
> 
> annotation_row=data.frame(
+   plasma=as.factor(annotated_protein_accession$plasma),
+   RBC=as.factor(annot .... [TRUNCATED] 

> annotation_col = data.frame(phenotype=design$phenotype, plex=design$plex)

> rownames(annotation_col)=colnames(mydat)

> annotation_colors=list(phenotype=c("Pool1"=colors_subphenotype[1], 
+                                    "Control"=colors_subphenotype[2], 
+        .... [TRUNCATED] 

> subset_genes = mydat[rowSums(is.na(annotation_row)) <2,]

> pdf(file=paste0(output_figures_dir, script_name, '-heatmap_only_erythrocyte_plasma_annotated.pdf'),
+     width=14, height=10)

> pheatmap::pheatmap(
+   subset_genes,
+   clustering_method="ward.D",
+   color = colorRampPalette(c("blue", "white", "red"))(50),
+   annotation_ro .... [TRUNCATED] 

> dev.off()
pdf 
  3 

> print('Done')
[1] "Done"

> ###############################################################################
> log_stop()
-/                                                                                                                                                                                            null device 
          1 
null device 
          1 
NULL
-/                                                                                                                                                                                            null device 
          1 
-/                                                                                                                                                                                            NULL
null device 
          1 
-/                                                                                                                                                                                            null device 
          1 
null device 
          1 
